// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: user_transaction.proto

package rpc

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UserTransaction struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	UserId               int32    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id"`
	TransactionId        int32    `protobuf:"varint,3,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserTransaction) Reset()         { *m = UserTransaction{} }
func (m *UserTransaction) String() string { return proto.CompactTextString(m) }
func (*UserTransaction) ProtoMessage()    {}
func (*UserTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_818d97771fcb29c6, []int{0}
}
func (m *UserTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserTransaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserTransaction.Merge(m, src)
}
func (m *UserTransaction) XXX_Size() int {
	return m.Size()
}
func (m *UserTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_UserTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_UserTransaction proto.InternalMessageInfo

type CreateUserTransactionReq struct {
	Transaction          *UserTransaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CreateUserTransactionReq) Reset()         { *m = CreateUserTransactionReq{} }
func (m *CreateUserTransactionReq) String() string { return proto.CompactTextString(m) }
func (*CreateUserTransactionReq) ProtoMessage()    {}
func (*CreateUserTransactionReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_818d97771fcb29c6, []int{1}
}
func (m *CreateUserTransactionReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateUserTransactionReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateUserTransactionReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateUserTransactionReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateUserTransactionReq.Merge(m, src)
}
func (m *CreateUserTransactionReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateUserTransactionReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateUserTransactionReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateUserTransactionReq proto.InternalMessageInfo

type CreateUserTransactionResp struct {
	IsSuccess            bool     `protobuf:"varint,1,opt,name=is_success,json=isSuccess,proto3" json:"is_success"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateUserTransactionResp) Reset()         { *m = CreateUserTransactionResp{} }
func (m *CreateUserTransactionResp) String() string { return proto.CompactTextString(m) }
func (*CreateUserTransactionResp) ProtoMessage()    {}
func (*CreateUserTransactionResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_818d97771fcb29c6, []int{2}
}
func (m *CreateUserTransactionResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateUserTransactionResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateUserTransactionResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateUserTransactionResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateUserTransactionResp.Merge(m, src)
}
func (m *CreateUserTransactionResp) XXX_Size() int {
	return m.Size()
}
func (m *CreateUserTransactionResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateUserTransactionResp.DiscardUnknown(m)
}

var xxx_messageInfo_CreateUserTransactionResp proto.InternalMessageInfo

type UpdateUserTransactionReq struct {
	Transaction          *UserTransaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UpdateUserTransactionReq) Reset()         { *m = UpdateUserTransactionReq{} }
func (m *UpdateUserTransactionReq) String() string { return proto.CompactTextString(m) }
func (*UpdateUserTransactionReq) ProtoMessage()    {}
func (*UpdateUserTransactionReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_818d97771fcb29c6, []int{3}
}
func (m *UpdateUserTransactionReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserTransactionReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserTransactionReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserTransactionReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserTransactionReq.Merge(m, src)
}
func (m *UpdateUserTransactionReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserTransactionReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserTransactionReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserTransactionReq proto.InternalMessageInfo

type UpdateUserTransactionResp struct {
	IsSuccess            bool     `protobuf:"varint,1,opt,name=is_success,json=isSuccess,proto3" json:"is_success"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateUserTransactionResp) Reset()         { *m = UpdateUserTransactionResp{} }
func (m *UpdateUserTransactionResp) String() string { return proto.CompactTextString(m) }
func (*UpdateUserTransactionResp) ProtoMessage()    {}
func (*UpdateUserTransactionResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_818d97771fcb29c6, []int{4}
}
func (m *UpdateUserTransactionResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserTransactionResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserTransactionResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserTransactionResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserTransactionResp.Merge(m, src)
}
func (m *UpdateUserTransactionResp) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserTransactionResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserTransactionResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserTransactionResp proto.InternalMessageInfo

type GetUserTransactionReq struct {
	UserId               int32    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUserTransactionReq) Reset()         { *m = GetUserTransactionReq{} }
func (m *GetUserTransactionReq) String() string { return proto.CompactTextString(m) }
func (*GetUserTransactionReq) ProtoMessage()    {}
func (*GetUserTransactionReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_818d97771fcb29c6, []int{5}
}
func (m *GetUserTransactionReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserTransactionReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserTransactionReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserTransactionReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserTransactionReq.Merge(m, src)
}
func (m *GetUserTransactionReq) XXX_Size() int {
	return m.Size()
}
func (m *GetUserTransactionReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserTransactionReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserTransactionReq proto.InternalMessageInfo

type GetUserTransactionResp struct {
	Transactions         []*UserTransaction `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GetUserTransactionResp) Reset()         { *m = GetUserTransactionResp{} }
func (m *GetUserTransactionResp) String() string { return proto.CompactTextString(m) }
func (*GetUserTransactionResp) ProtoMessage()    {}
func (*GetUserTransactionResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_818d97771fcb29c6, []int{6}
}
func (m *GetUserTransactionResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserTransactionResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserTransactionResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserTransactionResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserTransactionResp.Merge(m, src)
}
func (m *GetUserTransactionResp) XXX_Size() int {
	return m.Size()
}
func (m *GetUserTransactionResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserTransactionResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserTransactionResp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*UserTransaction)(nil), "ocpp.UserTransaction")
	proto.RegisterType((*CreateUserTransactionReq)(nil), "ocpp.CreateUserTransactionReq")
	proto.RegisterType((*CreateUserTransactionResp)(nil), "ocpp.CreateUserTransactionResp")
	proto.RegisterType((*UpdateUserTransactionReq)(nil), "ocpp.UpdateUserTransactionReq")
	proto.RegisterType((*UpdateUserTransactionResp)(nil), "ocpp.UpdateUserTransactionResp")
	proto.RegisterType((*GetUserTransactionReq)(nil), "ocpp.GetUserTransactionReq")
	proto.RegisterType((*GetUserTransactionResp)(nil), "ocpp.GetUserTransactionResp")
}

func init() { proto.RegisterFile("user_transaction.proto", fileDescriptor_818d97771fcb29c6) }

var fileDescriptor_818d97771fcb29c6 = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x92, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x71, 0x0a, 0x05, 0xae, 0xd0, 0x22, 0x4b, 0xad, 0x5a, 0x86, 0x04, 0x45, 0x0c, 0x2c,
	0x4d, 0x25, 0x98, 0x18, 0x58, 0xc2, 0x00, 0x85, 0xcd, 0xd0, 0x85, 0xa5, 0x6a, 0x63, 0x53, 0x3c,
	0x50, 0x9b, 0x38, 0x79, 0x09, 0x9e, 0xac, 0x23, 0x4f, 0x60, 0xd1, 0x4e, 0xc8, 0x4f, 0x81, 0xe2,
	0x0a, 0xe1, 0x56, 0xcd, 0xc0, 0xc2, 0x76, 0xbf, 0xef, 0xbf, 0xfc, 0xdf, 0xe9, 0x02, 0xad, 0x5c,
	0xb1, 0x74, 0x98, 0xa5, 0xa3, 0xa9, 0x1a, 0x25, 0x19, 0x17, 0xd3, 0x48, 0xa6, 0x22, 0x13, 0x78,
	0x5b, 0x24, 0x52, 0x1e, 0x77, 0x27, 0x3c, 0x7b, 0xc9, 0xc7, 0x51, 0x22, 0x5e, 0x7b, 0x13, 0x31,
	0x11, 0x3d, 0xdb, 0x1c, 0xe7, 0xcf, 0x56, 0x59, 0x61, 0xab, 0xe5, 0x50, 0xf8, 0x8e, 0xa0, 0x31,
	0x50, 0x2c, 0x7d, 0xfc, 0xfd, 0x1c, 0x6e, 0x81, 0xc7, 0x69, 0x1b, 0x9d, 0xa0, 0xb3, 0x9d, 0xb8,
	0x6a, 0x74, 0xe0, 0x71, 0x4a, 0x3c, 0x4e, 0xf1, 0x29, 0xec, 0xda, 0x68, 0x4e, 0xdb, 0x9e, 0x6d,
	0xd6, 0x8c, 0x0e, 0x7e, 0x9e, 0x48, 0xb5, 0x28, 0xfa, 0x14, 0x5f, 0x42, 0xdd, 0x61, 0x2b, 0xcc,
	0x15, 0x6b, 0xc6, 0x46, 0x07, 0x6b, 0x1d, 0x72, 0xe8, 0xe8, 0x3e, 0x0d, 0x29, 0xb4, 0xaf, 0x53,
	0x36, 0xca, 0xd8, 0x1a, 0x11, 0x61, 0x6f, 0xf8, 0x16, 0x6a, 0x8e, 0xd9, 0xd2, 0xd5, 0xce, 0x9b,
	0x51, 0xb1, 0x73, 0xb4, 0x66, 0x8f, 0x1b, 0x46, 0x07, 0xae, 0x9b, 0xb8, 0x22, 0xbc, 0x83, 0x4e,
	0x49, 0x8a, 0x92, 0xb8, 0x0b, 0xc0, 0xd5, 0x50, 0xe5, 0x49, 0xc2, 0x94, 0xb2, 0x29, 0x7b, 0x71,
	0xdd, 0xe8, 0xc0, 0x79, 0x25, 0xfb, 0x5c, 0x3d, 0x2c, 0xcb, 0x82, 0x78, 0x20, 0xe9, 0x3f, 0x10,
	0x97, 0xa4, 0xfc, 0x9d, 0xf8, 0x0a, 0x9a, 0x37, 0x2c, 0xdb, 0x80, 0xeb, 0x5c, 0x17, 0x95, 0x5e,
	0x37, 0x64, 0xd0, 0xda, 0x34, 0xae, 0x24, 0xbe, 0x87, 0x03, 0x87, 0xb9, 0x20, 0xa9, 0x94, 0xef,
	0x7b, 0x64, 0x74, 0xb0, 0x62, 0x27, 0x2b, 0x2a, 0xee, 0xcc, 0xe6, 0xfe, 0xd6, 0xd7, 0xdc, 0x47,
	0xb3, 0x85, 0x8f, 0x3e, 0x16, 0x3e, 0xfa, 0x5c, 0xf8, 0xe8, 0xa9, 0x92, 0xca, 0x64, 0x5c, 0xb5,
	0x3f, 0xee, 0xc5, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x93, 0x61, 0xbb, 0xef, 0x07, 0x03, 0x00,
	0x00,
}

type UserTransactionFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetId() int32
	GetUserId() int32
	GetTransactionId() int32
}

func (this *UserTransaction) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *UserTransaction) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewUserTransactionFromFace(this)
}

func (this *UserTransaction) GetId() int32 {
	return this.Id
}

func (this *UserTransaction) GetUserId() int32 {
	return this.UserId
}

func (this *UserTransaction) GetTransactionId() int32 {
	return this.TransactionId
}

func NewUserTransactionFromFace(that UserTransactionFace) *UserTransaction {
	this := &UserTransaction{}
	this.Id = that.GetId()
	this.UserId = that.GetUserId()
	this.TransactionId = that.GetTransactionId()
	return this
}

type CreateUserTransactionReqFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetTransaction() *UserTransaction
}

func (this *CreateUserTransactionReq) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *CreateUserTransactionReq) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewCreateUserTransactionReqFromFace(this)
}

func (this *CreateUserTransactionReq) GetTransaction() *UserTransaction {
	return this.Transaction
}

func NewCreateUserTransactionReqFromFace(that CreateUserTransactionReqFace) *CreateUserTransactionReq {
	this := &CreateUserTransactionReq{}
	this.Transaction = that.GetTransaction()
	return this
}

type CreateUserTransactionRespFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetIsSuccess() bool
}

func (this *CreateUserTransactionResp) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *CreateUserTransactionResp) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewCreateUserTransactionRespFromFace(this)
}

func (this *CreateUserTransactionResp) GetIsSuccess() bool {
	return this.IsSuccess
}

func NewCreateUserTransactionRespFromFace(that CreateUserTransactionRespFace) *CreateUserTransactionResp {
	this := &CreateUserTransactionResp{}
	this.IsSuccess = that.GetIsSuccess()
	return this
}

type UpdateUserTransactionReqFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetTransaction() *UserTransaction
}

func (this *UpdateUserTransactionReq) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *UpdateUserTransactionReq) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewUpdateUserTransactionReqFromFace(this)
}

func (this *UpdateUserTransactionReq) GetTransaction() *UserTransaction {
	return this.Transaction
}

func NewUpdateUserTransactionReqFromFace(that UpdateUserTransactionReqFace) *UpdateUserTransactionReq {
	this := &UpdateUserTransactionReq{}
	this.Transaction = that.GetTransaction()
	return this
}

type UpdateUserTransactionRespFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetIsSuccess() bool
}

func (this *UpdateUserTransactionResp) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *UpdateUserTransactionResp) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewUpdateUserTransactionRespFromFace(this)
}

func (this *UpdateUserTransactionResp) GetIsSuccess() bool {
	return this.IsSuccess
}

func NewUpdateUserTransactionRespFromFace(that UpdateUserTransactionRespFace) *UpdateUserTransactionResp {
	this := &UpdateUserTransactionResp{}
	this.IsSuccess = that.GetIsSuccess()
	return this
}

type GetUserTransactionReqFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetUserId() int32
}

func (this *GetUserTransactionReq) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *GetUserTransactionReq) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewGetUserTransactionReqFromFace(this)
}

func (this *GetUserTransactionReq) GetUserId() int32 {
	return this.UserId
}

func NewGetUserTransactionReqFromFace(that GetUserTransactionReqFace) *GetUserTransactionReq {
	this := &GetUserTransactionReq{}
	this.UserId = that.GetUserId()
	return this
}

type GetUserTransactionRespFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetTransactions() []*UserTransaction
}

func (this *GetUserTransactionResp) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *GetUserTransactionResp) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewGetUserTransactionRespFromFace(this)
}

func (this *GetUserTransactionResp) GetTransactions() []*UserTransaction {
	return this.Transactions
}

func NewGetUserTransactionRespFromFace(that GetUserTransactionRespFace) *GetUserTransactionResp {
	this := &GetUserTransactionResp{}
	this.Transactions = that.GetTransactions()
	return this
}

func (m *UserTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserTransaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserTransaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TransactionId != 0 {
		i = encodeVarintUserTransaction(dAtA, i, uint64(m.TransactionId))
		i--
		dAtA[i] = 0x18
	}
	if m.UserId != 0 {
		i = encodeVarintUserTransaction(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintUserTransaction(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateUserTransactionReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateUserTransactionReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateUserTransactionReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Transaction != nil {
		{
			size, err := m.Transaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUserTransaction(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateUserTransactionResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateUserTransactionResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateUserTransactionResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsSuccess {
		i--
		if m.IsSuccess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUserTransactionReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserTransactionReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserTransactionReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Transaction != nil {
		{
			size, err := m.Transaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUserTransaction(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUserTransactionResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserTransactionResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserTransactionResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsSuccess {
		i--
		if m.IsSuccess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetUserTransactionReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserTransactionReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserTransactionReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintUserTransaction(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetUserTransactionResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserTransactionResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserTransactionResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Transactions) > 0 {
		for iNdEx := len(m.Transactions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Transactions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUserTransaction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintUserTransaction(dAtA []byte, offset int, v uint64) int {
	offset -= sovUserTransaction(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovUserTransaction(uint64(m.Id))
	}
	if m.UserId != 0 {
		n += 1 + sovUserTransaction(uint64(m.UserId))
	}
	if m.TransactionId != 0 {
		n += 1 + sovUserTransaction(uint64(m.TransactionId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateUserTransactionReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Transaction != nil {
		l = m.Transaction.Size()
		n += 1 + l + sovUserTransaction(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateUserTransactionResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsSuccess {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateUserTransactionReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Transaction != nil {
		l = m.Transaction.Size()
		n += 1 + l + sovUserTransaction(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateUserTransactionResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsSuccess {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUserTransactionReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUserTransaction(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUserTransactionResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Transactions) > 0 {
		for _, e := range m.Transactions {
			l = e.Size()
			n += 1 + l + sovUserTransaction(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovUserTransaction(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUserTransaction(x uint64) (n int) {
	return sovUserTransaction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			m.TransactionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransactionId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateUserTransactionReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateUserTransactionReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateUserTransactionReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transaction == nil {
				m.Transaction = &UserTransaction{}
			}
			if err := m.Transaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateUserTransactionResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateUserTransactionResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateUserTransactionResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSuccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSuccess = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUserTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserTransactionReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserTransactionReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserTransactionReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transaction == nil {
				m.Transaction = &UserTransaction{}
			}
			if err := m.Transaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserTransactionResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserTransactionResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserTransactionResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSuccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSuccess = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUserTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserTransactionReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserTransactionReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserTransactionReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserTransactionResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserTransactionResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserTransactionResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, &UserTransaction{})
			if err := m.Transactions[len(m.Transactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUserTransaction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUserTransaction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserTransaction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserTransaction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUserTransaction
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUserTransaction
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUserTransaction
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUserTransaction        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUserTransaction          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUserTransaction = fmt.Errorf("proto: unexpected end of group")
)
